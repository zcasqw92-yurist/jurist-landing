'use client';
import { useState } from 'react';

type Form = {
  name: string;
  phone: string;
  message: string;
  website?: string; // honeypot –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
};

export default function LeadForm({ compact = false }: { compact?: boolean }) {
  const [form, setForm] = useState<Form>({ name: '', phone: '', message: '' });
  const [loading, setLoading] = useState(false);
  const [done, setDone] = useState(false);
  const [error, setError] = useState<string | null>(null);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setError(null);

    if (!form.name || !form.phone) {
      setError('–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω');
      return;
    }

    setLoading(true);
    try {
      const res = await fetch('/api/leads', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: form.name,
          phone: form.phone,
          comment: form.message, // üëà –∫–ª–∞–¥—ë–º –≤ comment, –∫–∞–∫ –≤ –ë–î
          website: form.website, // honeypot-–ø–æ–ª–µ
        }),
      });

      const data = await res.json();
      if (!res.ok || !data.ok) throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      setDone(true);
    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
    } finally {
      setLoading(false);
    }
  }

  if (done) {
    return (
      <div className="text-center py-8">
        <h3 className="text-xl font-semibold">–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.</h3>
        <p className="text-gray-600 mt-2">–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.</p>
      </div>
    );
  }

  return (
    <form onSubmit={onSubmit} className={compact ? 'space-y-3' : 'space-y-4'}>
      <div className={compact ? 'grid grid-cols-1 gap-3' : 'grid md:grid-cols-2 gap-4'}>
        <div>
          <label className="label">–ò–º—è *</label>
          <input
            className="input"
            value={form.name}
            onChange={e => setForm({ ...form, name: e.target.value })}
            placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è"
          />
        </div>
        <div>
          <label className="label">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
          <input
            className="input"
            value={form.phone}
            onChange={e => setForm({ ...form, phone: e.target.value })}
            placeholder="+7 (___) ___-__-__"
          />
        </div>
      </div>

      <div>
        <label className="label">–ö–æ—Ä–æ—Ç–∫–æ –æ —Å–∏—Ç—É–∞—Ü–∏–∏</label>
        <textarea
          className="input min-h-[100px]"
          value={form.message}
          onChange={e => setForm({ ...form, message: e.target.value })}
          placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å"
        />
      </div>

      {/* honeypot */}
      <div className="hidden">
        <label>–í–∞—à —Å–∞–π—Ç</label>
        <input
          value={form.website || ''}
          onChange={e => setForm({ ...form, website: e.target.value })}
        />
      </div>

      {error && <p className="text-red-600 text-sm">{error}</p>}

      <button className="btn btn-primary w-full" disabled={loading}>
        {loading ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º‚Ä¶' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
      </button>

      <p className="text-xs text-gray-500">
        –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
      </p>
    </form>
  );
}
